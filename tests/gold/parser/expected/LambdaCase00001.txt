Haskell File
  PPRAGMA
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('LANGUAGE')
    PsiElement(HaskellTokenType.PRAGMA)('LambdaCase')
    PsiElement(HaskellTokenType.#-})('#-}')
  MODULEDECL
    PsiElement(HaskellTokenType.module)('module')
    QCONID
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('LambdaCase00001')
    PsiElement(HaskellTokenType.where)('where')
  BODY
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('unJust')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.\case)('\case')
          ALT
            PAT
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Just')
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('x')
            PsiElement(HaskellTokenType.->)('->')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('x')
          ALT
            PAT
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Nothing')
            PsiElement(HaskellTokenType.->)('->')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('error')
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('so unjust!')
                PsiElement(HaskellTokenType.")('"')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('unJust'')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.\case)('\ case')
          ALT
            PAT
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Just')
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('x')
            PsiElement(HaskellTokenType.->)('->')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('x')
          ALT
            PAT
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Nothing')
            PsiElement(HaskellTokenType.->)('->')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('error')
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('so unjust!')
                PsiElement(HaskellTokenType.")('"')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('unJust''')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('map')
          QOP
            QVAROP
              QVARSYM
                VARSYM
                  PsiElement(HaskellTokenType.$)('$')
          PsiElement(HaskellTokenType.\case)('\ case')
          ALT
            PAT
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Just')
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('x')
            PsiElement(HaskellTokenType.->)('->')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('x')
          ALT
            PAT
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Nothing')
            PsiElement(HaskellTokenType.->)('->')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('error')
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('so unjust!')
                PsiElement(HaskellTokenType.")('"')