HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Instance00002')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.newtype ('newtype')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('FooT')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('m')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('FooT')
WHITE_SPACE (' ')
HaskellTokenType.{ ('{')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('unFooT')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ReaderT')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Foo')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('m')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.} ('}')
WHITE_SPACE ('\n  ')
HaskellTokenType.deriving ('deriving')
WHITE_SPACE (' ')
HaskellTokenType.newtype ('newtype')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Functor')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MonadIO')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Applicative')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Monad')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MonadTrans')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MonadThrow')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MonadCatch')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MonadLogger')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MonadMask')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MonadResource')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.deriving ('deriving')
WHITE_SPACE (' ')
HaskellTokenType.newtype ('newtype')
WHITE_SPACE (' ')
HaskellTokenType.instance ('instance')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MonadBase')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('IO')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('m')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MonadBase')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('IO')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('FooT')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('m')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.deriving ('deriving')
WHITE_SPACE (' ')
HaskellTokenType.newtype ('newtype')
WHITE_SPACE (' ')
HaskellTokenType.instance ('instance')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MonadBaseControl')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('IO')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('m')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MonadBaseControl')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('IO')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('FooT')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('m')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.deriving ('deriving')
WHITE_SPACE (' ')
HaskellTokenType.newtype ('newtype')
WHITE_SPACE (' ')
HaskellTokenType.instance ('instance')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MonadError')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('e')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('m')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MonadError')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('e')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('FooT')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('m')
HaskellTokenType.) (')')