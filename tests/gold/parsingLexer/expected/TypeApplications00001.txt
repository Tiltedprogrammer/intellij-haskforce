HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('TypeApplications00001')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic leftbrace ('')
HaskellTokenType.varidRegexp ('foo')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Maybe')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Int')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('foo')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('bar')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('X')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('baz')
WHITE_SPACE (' ')
HaskellTokenType.$ ('$')
WHITE_SPACE (' ')
HaskellTokenType.\ ('\')
HaskellTokenType.varidRegexp ('spam')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('eggs')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('foo')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('bar')
WHITE_SPACE (' ')
HaskellTokenType.@ ('@')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.@ ('@')
HaskellTokenType.conidRegexp ('X')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('baz')
WHITE_SPACE (' ')
HaskellTokenType.$ ('$')
WHITE_SPACE (' ')
HaskellTokenType.\ ('\')
HaskellTokenType.varidRegexp ('spam')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('eggs')
HaskellTokenType.Synthetic rightbrace ('')